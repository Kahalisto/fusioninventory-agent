#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;
use XML::TreePP;

use FusionInventory::Agent;
use FusionInventory::Agent::Logger;
use FusionInventory::Agent::Recipient;
use FusionInventory::Agent::Task::NetInventory;
use FusionInventory::Agent::Tools;
use FusionInventory::Agent::Tools::Hardware;

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

my $options = {
    threads => 1
};

GetOptions(
    $options,
    'model=s',
    'type=s',
    'file',
    'community=s',
    'credential=s',
    'entity=s',
    'threads=i',
    'recipient=s',
    'timeout=i',
    'verbose',
    'debug+',
    'help',
    'version',
) or pod2usage(-verbose => 0);

if ($options->{version}) {
  print "NetInventory task $FusionInventory::Agent::Task::NetInventory::VERSION\n";
  exit 0;
}
pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "no device given, aborting\n", -verbose => 0
) unless @ARGV;

my $agent = FusionInventory::Agent->new(%setup);
$agent->init(options => $options);

my $device_id = 1;
my @devices;
foreach my $arg (@ARGV) {
    my $device = {
        id           => $device_id++,
        authsnmp_id  => 1,
        modelsnmp_id => 1
    };
    if ($options->{file}) {
        $device->{file} = $arg;
    } else {
        $device->{ip} = $arg;
    }
    $device->{type}   = $options->{type}   if $options->{type};
    $device->{entity} = $options->{entity} if $options->{entity};
    push @devices, $device;
}

my $model;

if ($options->{model}) {
    pod2usage(
        -message => "invalid file '$options->{model}', aborting\n",
        -verbose => 0
    ) unless -f $options->{model};
    $model = loadModel($options->{model});
}

my $credentials_id = 1;
my @credentials;
if ($options->{community}) {
    foreach my $community (@{$options->{community}}) {
        push @credentials,
            { id => $credentials_id++, version => 1, community => $community };
    }
} elsif ($options->{credential}) {
    foreach my $specification (@{$options->{credential}}) {
        my $credential = { id => $credentials_id++ };
        foreach my $parameter (split(',', $specification)) {
            my ($key, $value) = split(':', $parameter);
            $credential->{$key} = $value;
        }
        push @credentials, $credential;
    }
} else {
    push @credentials, {
        id => $credentials_id++, version => 1, community => 'public'
    };
}

my $task = FusionInventory::Agent::Task::NetInventory->new(
    logger => $agent->{logger},
);

$task->configure(
    datadir     => $setup{datadir},
    deviceid    => $agent->{deviceid},
    pid         => 1,
    threads     => $options->{threads},
    timeout     => $options->{timeout},
    devices     => \@devices,
    models      => [ $model ],
    credentials => \@credentials
);

my $recipient = FusionInventory::Agent::Recipient->create(
    target  => $options->{recipient},
    task    => 'netinventory',
    verbose => $options->{verbose}
);

eval {
    $task->run(
        user         => $agent->{config}->{user},
        password     => $agent->{config}->{password},
        proxy        => $agent->{config}->{proxy},
        ca_cert_file => $agent->{config}->{'ca-cert-file'},
        ca_cert_dir  => $agent->{config}->{'ca-cert-dir'},
        no_ssl_check => $agent->{config}->{'no-ssl-check'},
        recipient    => $recipient
    );
};

__END__

=head1 NAME

fusioninventory-netinventory - Standalone network inventory

=head1 SYNOPSIS

fusioninventory-netinventory [options] <device> <device>

  Options:
    --file               use device as files
    --model file         model file
    --type string        device type
    --credential string  SNMP credentials (default: version:1,community:public)
    --timeout number     SNMP timeout (default: 15s)
    --entity string      GLPI entity
    --threads number     threads number (default: 1)
    --recipient string   where to send result (default: stdout)
    --verbose            verbose output (control messages)
    --debug              debug output (execution traces)
    -h --help            print this message and exit
    --version            print the task version and exit

=head1 DESCRIPTION

F<fusioninventory-netinventory> allows to run a network inventory task without
a GLPI server.
