#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;
use XML::TreePP;

use FusionInventory::Agent;
use FusionInventory::Agent::Logger;
use FusionInventory::Agent::Recipient;
use FusionInventory::Agent::Task::NetInventory;
use FusionInventory::Agent::Tools;

my %types = (
    1 => 'COMPUTER',
    2 => 'NETWORKING',
    3 => 'PRINTER',
    4 => 'STORAGE',
    5 => 'POWER',
    6 => 'PHONE',
    7 => 'VIDEO',
);

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

my $options = {
};

GetOptions(
    $options,
    'model=s',
    'type=s',
    'host=s',
    'file=s',
    'community=s',
    'credential=s',
    'entity=s',
    'recipient=s',
    'timeout=i',
    'verbose',
    'debug+',
    'help',
    'version',
) or pod2usage(-verbose => 0);

if ($options->{version}) {
  print "NetInventory task $FusionInventory::Agent::Task::NetInventory::VERSION\n";
  exit 0;
}
pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "no host nor file given, aborting\n", -verbose => 0
) unless $options->{host} or $options->{file};

my $agent = FusionInventory::Agent->new(%setup);
$agent->init(options => $options);

my $device = {
    ID           => 0,
    IP           => $options->{host},
    FILE         => $options->{file},
    AUTHSNMP_ID  => 1,
    MODELSNMP_ID => 1
};

my $model      = { ID => 1 };

if ($options->{model}) {
    pod2usage(
        -message => "invalid file '$options->{model}', aborting\n",
        -verbose => 0
    ) unless -f $options->{model};
    $model = loadModel($options->{model});
}

if ($options->{type}) {
    pod2usage(
        -message => "invalid type '$options->{type}', aborting\n",
        -verbose => 0
    ) unless any { $options->{type} eq $_ } values %types;
    $device->{TYPE} = $options->{type};
}

my $id = 1;
if ($options->{community}) {
    foreach my $community (@{$options->{community}}) {
        push @credentials,
            { id => $id++, version => 1, community => $community };
    }
} elsif ($options->{credential}) {
    foreach my $specification (@{$options->{credential}}) {
        my $credential = { id => $id++ };
        foreach my $parameter (split(',', $specification)) {
            my ($key, $value) = split(':', $parameter);
            $credential->{$key} = $value;
        }
        push @credentials, $credential;
    }
} else {
    push @credentials, { id => $id++, version => 1, community => 'public' };
}

if ($options->{entity}) {
    $device->{ENTITY} = $options->{entity};
}

my $task = FusionInventory::Agent::Task::NetInventory->new(
    config   => $agent->{config},
    confdir  => $agent->{confdir},
    datadir  => $agent->{datadir},
    logger   => $agent->{logger},
    deviceid => $agent->{deviceid},
);

$task->setParam('pid',         1);
$task->setParam('threads',     1);
$task->setParam('timeout',     $options->{timeout});
$task->setParam('devices',     [ $device ]);
$task->setParam('models',      [ $model ]);
$task->setParam('credentials', \@credentials);

my $recipient = FusionInventory::Agent::Recipient->create(
    target  => $options->{recipient},
    task    => 'netinventory',
    verbose => $options->{verbose}
);

eval {
    $agent->runSingleTask(task => $task, recipient => $recipient);
};

sub loadModel {
    my ($file) = @_;

    my $model = XML::TreePP->new()->parsefile($file)->{model};

    my @get = map {
        {
            OID    => $_->{oid},
            OBJECT => $_->{mapping_name},
        }
    } grep {
        $_->{dynamicport} == 0
    } @{$model->{oidlist}->{oidobject}};

    my @walk = map {
        {
            OID    => $_->{oid},
            OBJECT => $_->{mapping_name},
        }
    } grep {
        $_->{dynamicport} == 1
    } @{$model->{oidlist}->{oidobject}};

    return {
        ID   => 1,
        NAME => $model->{name},
        TYPE => $model->{type},
        GET  => \@get,
        WALK => \@walk,
    }
}

__END__

=head1 NAME

fusioninventory-netinventory - Standalone network inventory

=head1 SYNOPSIS

fusioninventory-netinventory [options] [--host <host>] [--file <file>]

  Options:
    --host host          device host name
    --file file          snmpwalk output file
    --model file         model file
    --type string        device type
    --credential string  SNMP credentials (default: version:1,community:public)
    --timeout number     SNMP timeout (default: 15s)
    --entity string      GLPI entity
    --recipient string   where to send result (default: stdout)
    --verbose            verbose output (control messages)
    --debug              debug output (execution traces)
    -h --help            print this message and exit
    --version            print the task version and exit

=head1 DESCRIPTION

F<fusioninventory-netinventory> allows to run a network inventory task without
a GLPI server.
