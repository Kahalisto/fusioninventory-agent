#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;

Getopt::Long::Configure( "no_ignorecase" );

my $options = {};

GetOptions(
    $options,
    'additional-content=s',
    'collect-timeout=s',
    'ca-cert-dir=s',
    'ca-cert-file=s',
    'conf-file=s',
    'config=s',
    'color',
    'daemon|d',
    'no-fork',
    'debug+',
    'delaytime=s',
    'force|f',
    'help|h',
    'lazy',
    'list-tasks',
    'setup',
    'logger=s',
    'logfile=s',
    'logfile-maxsize=i',
    'no-category=s',
    'no-httpd',
    'no-ssl-check',
    'no-task=s',
    'no-p2p',
    'password|p=s',
    'proxy|P=s',
    'httpd-ip=s',
    'httpd-port=s',
    'httpd-trust=s',
    'scan-homedirs',
    'server|s=s',
    'tag|t=s',
    'timeout=i',
    'user|u=s',
    'version',
    'wait|w=s',
    # deprecated options
    'html',
    'local|l=s',
    'backend-collect-timeout',
) or pod2usage(-verbose => 0);

pod2usage(-verbose => 0, -exitstatus => 0) if $options->{help};

if ($options->{version}) {
    print $FusionInventory::Agent::VERSION_STRING . "\n";
    exit 0;
}

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

if ($options->{setup}) {
    foreach my $key (keys %setup) {
        print "$key: $setup{$key}\n";
    }
    exit 0;
}

if ($options->{'conf-file'}) {
    if ($options->{config}) {
        if ($options->{config} ne 'file') {
            print STDERR
                "don't use --conf-file with $options->{config} backend";
            exit 1;
        }
    } else {
        $options->{config} = 'file';
    }
}

my $agent = FusionInventory::Agent->new(%setup);

if ($options->{'list-tasks'}) {
    my %tasks = $agent->getAvailableTasks();
    foreach my $task (keys %tasks) {
        print "$task (v$tasks{$task})\n";
    }
    exit 0;
}

if ($options->{wait}) {
    my $time = int rand($options->{wait});
    sleep $time;
}

eval {
    $agent->init(options => $options);
    $agent->initControllers();
    $agent->initTasks();
    $agent->initHTTPInterface() if $options->{daemon};
    $agent->daemonize() if $options->{daemon} && !$options->{'no-fork'};
    $agent->run(background => $options->{daemon});
};

if ($EVAL_ERROR) {
    print STDERR "Execution failure:.\n";
    print STDERR $EVAL_ERROR;
    exit 1;
}

exit(0);

__END__

=head1 NAME

fusioninventory-agent - FusionInventory agent main executable

=head1 SYNOPSIS

B<fusioninventory-agent>
S<[B<--delaytime> I<time>]>
S<[B<--lazy>]>
S<[B<--no-task> I<string>]>
S<[B<--no-category> I<string>]>
S<[B<--scan-homedir>]>
S<[B<--force>]>
S<[B<--collect-timeout> I<time>]>
S<[B<--additional-content> I<file>]>
S<[B<--no-p2p>]>
S<[B<--proxy> I<url>]>
S<[B<--user> I<string>]>
S<[B<--password> I<string>]>
S<[B<--ca-cert-dir> I<directory>]>
S<[B<--ca-cert-file> I<file>]>
S<[B<--no-ssl-check>]>
S<[B<--timeout> I<time>]>
S<[B<--no-httpd>]>
S<[B<--httpd-ip> I<address>]>
S<[B<--httpd-port> I<integer>]>
S<[B<--httpd-trust> I<address>]>
S<[B<--logger> I<string>]>
S<[B<--logfile> I<file>]>
S<[B<--logfile-maxsize> I<integer>]>
S<[B<--logfacility> I<string>]>
S<[B<--color>]>
S<[B<--config> I<string>]>
S<[B<--conf-file> I<file>]>
S<[B<--wait> I<integer>]>
S<[B<--daemon> S<[B<--no-fork>]>]>
S<[B<--tag> I<string>]>
S<B<--server> I<url>>

B<fusioninventory-agent> B<--list-tasks>

B<fusioninventory-agent> B<--setup>

=head1 DESCRIPTION

F<fusioninventory-agent> is the main executable for FusionInventory agent. It
relies on a compatible control server (OCS, GLPI, OTRS) to schedule and configure
various management tasks, such as local inventory, software deployment or
network discovery

=head1 OPTIONS

=head2 Generic options

=over

=item B<-s> I<URI>, B<--server> I<URI>

Set B<server> directive, see L<agent.cfg> for details.

=item B<--delaytime> I<time>

Set B<delaytime> directive, see L<agent.cfg> for details.

=item B<--lazy>

Set B<lazy> directive, see L<agent.cfg> for details.

=item B<--no-task> I<task>

Set B<no-task> directive, see L<agent.cfg> for details.

=item B<-P> I<URI>, B<--proxy> I<URI>

Set B<proxy> directive, see L<agent.cfg> for details.

=item B<-u> I<user>, B<--user> I<user>

Set B<user> directive, see L<agent.cfg> for details.

=item B<-p> I<password>, B<--password> I<password>

Set B<password> directive, see L<agent.cfg> for details.

=item B<--ca-cert-dir> I<directory>

Set B<ca-cert-dir> directive, see L<agent.cfg> for details.

=item B<--ca-cert-file> I<file>

Set B<ca-cert-file> directive, see L<agent.cfg> for details.

=item B<--no-ssl-check>

Set B<no-ssl-check> directive, see L<agent.cfg> for details.

=item B<--timeout> I<time>

Set B<timeout> directive, see L<agent.cfg> for details.

=item B<--no-httpd>

Set B<no-httpd> directive, see L<agent.cfg> for details.

=item B<--httpd-ip> I<ip>

Set B<httpd-ip> directive, see L<agent.cfg> for details.

=item B<--httpd-port> I<port>

Set B<httpd-port> directive, see L<agent.cfg> for details.

=item B<--httpd-trust> I<ip>

Set B<httpd-trust> directive, see L<agent.cfg> for details.

=item B<--logger> I<backend>

Set B<logger> directive, see L<agent.cfg> for details.

=item B<--logfile> I<file>

Set B<logfile> directive, see L<agent.cfg> for details.

=item B<--logfile-maxsize> I<size>

Set B<logfile-maxsize> directive, see L<agent.cfg> for details.

=item B<--logfacility> I<facility>

Set B<logfacility> directive, see L<agent.cfg> for details.

=item B<--color>

Set B<color> directive, see L<agent.cfg> for details.

=item B<--debug>

Set B<debug> directive, see L<agent.cfg> for details.

=item B<--config> I<backend>

Configuration backend to use.

The available backends are:

=over 4

=item

file: read configuration from a file (default anywhere else as Windows).

=item

registry: read configuration from the registry (default on Windows).

=item

none: don't read any configuration.

=back

=item B<--conf-file> I<file>

Use I<file> as configuration file (implies file configuration backend).

=item B<-w> I<time>, B<--wait> I<time>

Wait a random delay whose value is computed randomly between 0 and TIME
seconds, before execution. This is useful when execution is triggered from some
kind of system scheduling on multiple clients, to spread the server load.

=item B<-d>, B<--daemon>

Run the agent as a daemon.

=item B<--no-fork>

Don't fork in background.

This option is only honoured when running as a daemon.

=item B<--list-tasks>

List available tasks and exit.

=item B<--setup>

Print the agent setup directories and exit.

=item B<--version>

Print the version and exit.

=back

=head2 Inventory task specific options

=over

=item B<--no-category> I<category>

Set B<no-category> directive, see L<agent.cfg> for details.

=item B<--scan-homedirs>

Set B<scan-homedirs> directive, see L<agent.cfg> for details.

=item B<-f>, B<--force>

Set B<force> directive, see L<agent.cfg> for details.

=item B<--collect-timeout> I<time>

Set B<collect-timeout> directive, see L<agent.cfg> for details.

=item B<--additional-content> I<file>

Set B<additional-content> directive, see L<agent.cfg> for details.

=item B<--tag> I<string>

Set B<tag> directive, see L<agent.cfg> for details.

=back

=head2 Deployment task specific options

=over

=item B<--no-p2p>

Set B<no-p2p> directive, see L<agent.cfg> for details.

=back
