#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;
use FusionInventory::Agent::Recipient;
use FusionInventory::Agent::Task::NetDiscovery;

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

my $options = {
    threads   => 1
};

GetOptions(
    $options,
    'first=s',
    'last=s',
    'dictionary=s',
    'community=s@',
    'credentials=s@',
    'entity=s',
    'threads=i',
    'recipient=s',
    'timeout=i',
    'verbose',
    'debug+',
    'help',
    'version'
) or pod2usage(-verbose => 0);

if ($options->{version}) {
  print "NetDiscovery task $FusionInventory::Agent::Task::NetDiscovery::VERSION\n";
  exit 0;
}
pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "no first address, aborting\n", -verbose => 0
) unless $options->{first};
pod2usage(
    -message => "no last address, aborting\n", -verbose => 0
) unless $options->{last};

my $agent = FusionInventory::Agent->new(%setup);

my $range = {
    ID      => 1,
    IPSTART => $options->{first},
    IPEND   => $options->{last},
};

my $dictionary;
my @authentications;

if ($options->{dictionary}) {
    die "no such file $options->{dictionary}"
        unless -f $options->{dictionary};
    $dictionary = getDictionary($options->{dictionary});
}

my $id = 1;
if ($options->{community}) {
    foreach my $community (@{$options->{community}}) {
        push @authentications, { ID => $id++, COMMUNITY => $community };
    }
} elsif ($options->{credentials}) {
    foreach my $credentials (@{$options->{credentials}}) {
        my $authentication = { ID => $id++ };
        foreach my $parameter (split(',', $credentials)) {
            my ($key, $value) = split(':', $parameter);
            $key = uc($key);
            $authentication->{$key} = $value;
        }
        push @authentications, $authentication;
    }
} else {
    push @authentications, { ID => $id++, COMMUNITY => 'public' };
}

if ($options->{entity}) {
    $range->{ENTITY} = $options->{entity};
}

my $task = FusionInventory::Agent::Task::NetDiscovery->new(
    config   => $agent->{config},
    confdir  => $agent->{confdir},
    datadir  => $agent->{datadir},
    logger   => $agent->{logger},
    deviceid => $agent->{deviceid},
    recipient => FusionInventory::Agent::Task::NetInventory::Target->new(),
);

$task->{options} = {
    NAME => 'NETDISCOVERY',
    PARAM => [
        {
            PID               => 1,
            THREADS_DISCOVERY => $options->{threads},
            TIMEOUT           => $options->{timeout},
        }
    ],
    RANGEIP        => [ $range ],
    AUTHENTICATION => [ @authentications ],
    DICO           => $dictionary,
};

my $recipient = FusionInventory::Agent::Recipient->create(
    target  => $options->{recipient},
    task    => 'netdiscovery',
    verbose => $options->{verbose}
);

eval {
    $agent->init(options => $options);
    $agent->runSingleTask(task => $task, recipient => $recipient);
};

sub getDictionary {
    my ($file) = @_;

    open (my $handle, '<', $file) or die "Can't open $file: $ERRNO";
    local $INPUT_RECORD_SEPARATOR;
    my $string = <$handle>;
    close $handle;

    return $string;
}

package FusionInventory::Agent::Task::NetInventory::Target;

sub new {
    my ($class, %params) = @_;

     my $storage = FusionInventory::Agent::Task::NetInventory::Storage->new();

    return bless {
        storage => $storage
    }, $class;
}

sub getStorage {
    my ($self, %params) = @_;

    return $self->{storage};
}

package FusionInventory::Agent::Task::NetInventory::Storage;

sub new {
    my ($class) = @_;

    return bless {}, $class;
}

sub save {
}

sub restore {
    return {
        dictionary =>
            FusionInventory::Agent::Task::NetDiscovery::Dictionary->new()
    };
}

__END__

=head1 NAME

fusioninventory-netdiscovery - Standalone network discovery

=head1 SYNOPSIS

fusioninventory-netdiscovery [options] --first <start> --last <stop>

  Options:
    --first address      IP range first address
    --last address       IP range last address
    --dictionary file    dictionary file
    --credentials string SNMP credentials
                         (default: version:1,community:public)
    --timeout numbe      SNMP timeout (default: 1s)
    --entity string      GLPI entity
    --threads number     threads number (default: 1)
    --recipient string   where to send result (default: stdout)
    --verbose            verbose output (control messages)
    --debug              debug output (execution traces)
    -h --help            print this message and exit
    --version            print the task version and exit

=head1 DESCRIPTION

F<fusioninventory-netdiscovery> allows to run a network discovery task without a
GLPI server.
