#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;
use FusionInventory::Agent::Recipient;
use FusionInventory::Agent::Task::NetDiscovery;
use FusionInventory::Agent::Task::NetDiscovery::Dictionary;

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

my $options = {
    threads   => 1
};

GetOptions(
    $options,
    'first=s',
    'last=s',
    'dictionary=s',
    'community=s@',
    'credential=s@',
    'entity=s',
    'threads=i',
    'recipient=s',
    'timeout=i',
    'verbose',
    'debug+',
    'help',
    'version'
) or pod2usage(-verbose => 0);

if ($options->{version}) {
  print "NetDiscovery task $FusionInventory::Agent::Task::NetDiscovery::VERSION\n";
  exit 0;
}
pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "no first address, aborting\n", -verbose => 0
) unless $options->{first};
pod2usage(
    -message => "no last address, aborting\n", -verbose => 0
) unless $options->{last};

my $agent = FusionInventory::Agent->new(%setup);
$agent->init(options => $options);

my $range = {
    id   => 1,
    spec => $options->{first} . '-' . $options->{last},
};

my $dictionary;
if ($options->{dictionary}) {
    die "no such file $options->{dictionary}"
        unless -f $options->{dictionary};
    $dictionary = FusionInventory::Agent::Task::NetDiscovery::Dictionary->new(
        file => $options->{dictionary}
    );
}

my $id = 1;
my @credentials;
if ($options->{community}) {
    foreach my $community (@{$options->{community}}) {
        push @credentials,
            { id => $id++, version => 1, community => $community };
    }
} elsif ($options->{credential}) {
    foreach my $specification (@{$options->{credential}}) {
        my $credential = { id => $id++ };
        foreach my $parameter (split(',', $specification)) {
            my ($key, $value) = split(':', $parameter);
            $credential->{$key} = $value;
        }
        push @credentials, $credential;
    }
} else {
    push @credentials, { id => $id++, version => 1, community => 'public' };
}

if ($options->{entity}) {
    $range->{entity} = $options->{entity};
}

my $task = FusionInventory::Agent::Task::NetDiscovery->new(
    config   => $agent->{config},
    confdir  => $agent->{confdir},
    datadir  => $agent->{datadir},
    logger   => $agent->{logger},
    deviceid => $agent->{deviceid},
);

$task->setParam('pid',         1);
$task->setParam('threads',     $options->{threads});
$task->setParam('timeout',     $options->{timeout});
$task->setParam('blocks',      [ $range ]);
$task->setParam('credentials', \@credentials);
$task->setParam('dictionary',  $dictionary);

my $recipient = FusionInventory::Agent::Recipient->create(
    target  => $options->{recipient},
    task    => 'netdiscovery',
    verbose => $options->{verbose}
);

eval {
    $agent->runSingleTask(task => $task, recipient => $recipient);
};

__END__

=head1 NAME

fusioninventory-netdiscovery - Standalone network discovery

=head1 SYNOPSIS

fusioninventory-netdiscovery [options] --first <start> --last <stop>

  Options:
    --first address      IP range first address
    --last address       IP range last address
    --dictionary file    dictionary file
    --credential string  SNMP credentials (default: version:1,community:public)
    --timeout number     SNMP timeout (default: 1s)
    --entity string      GLPI entity
    --threads number     threads number (default: 1)
    --recipient string   where to send result (default: stdout)
    --verbose            verbose output (control messages)
    --debug              debug output (execution traces)
    -h --help            print this message and exit
    --version            print the task version and exit

=head1 DESCRIPTION

F<fusioninventory-netdiscovery> allows to run a network discovery task without a
GLPI server.
